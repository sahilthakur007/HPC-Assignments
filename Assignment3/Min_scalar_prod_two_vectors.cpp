// #include <stdlib.h>
#include <stdio.h>
#include <algorithm>
#include <iostream>
#include <omp.h>
#include <time.h>
using namespace std;
int compare(int x, int y)
{
    return x > y;
}
int main()
{

    clock_t start, end;
    start = clock();

    int v1[] = {3, 2, 5, 6, 1, 3, 3, 43, 54, 21, 43, 76, 21, 32, 43, 54, 21, 987, 21, 32, 54, 21, 32, 54, 21, 43, 21, 43, 21, 421, 43, 12, 5, 6, 7, 4, 2, 8, 9, 4, 2, 2, 6, 0, 1, 9, 43, 12, 5, 6, 2, 6, 0, 1, 9, 43, 12, 5, 6, 7, 4, 2, 8, 9, 4, 2, 5, 45, 12, 34, 54, 23, 32, 76, 15, 18, 42, 6, 14, 10, 3, 3, 43, 54, 21, 43, 76, 21, 32, 43, 54, 21, 987, 21, 32, 54, 21, 32, 54, 21, 2, 6, 0, 1, 9, 43, 12, 5, 6, 7, 4, 2, 8, 9, 4, 2, 5, 45, 12, 34, 54, 23, 32, 76, 15, 18, 42, 6, 14, 10, 3, 3, 43, 54, 21, 43, 76, 21, 32, 43, 54, 21, 987, 21, 32, 54, 21, 32, 54, 21, 3, 2, 5, 6, 1, 3, 3, 43, 54, 21, 43, 76, 21, 32, 43, 54, 21, 987, 21, 32, 54, 21, 32, 54, 21, 43, 21, 43, 21, 421, 43, 12, 5, 6, 7, 4, 2, 8, 9, 4, 2, 2, 6, 0, 1, 9, 43, 12, 5, 6};
    int v2[] = {2, 6, 0, 1, 9, 43, 12, 5, 6, 7, 4, 2, 8, 9, 4, 2, 5, 45, 12, 34, 54, 23, 32, 76, 15, 18, 42, 6, 14, 10, 3, 3, 43, 54, 21, 43, 76, 21, 32, 43, 54, 21, 987, 21, 32, 54, 21, 32, 54, 21, 3, 2, 5, 6, 1, 3, 3, 43, 54, 21, 43, 76, 21, 32, 43, 54, 21, 987, 21, 32, 54, 21, 32, 54, 21, 43, 21, 43, 21, 421, 43, 12, 5, 6, 7, 4, 2, 8, 9, 4, 2, 2, 6, 0, 1, 9, 43, 12, 5, 6, 2, 6, 0, 1, 9, 43, 12, 5, 6, 7, 4, 2, 8, 9, 4, 2, 5, 45, 12, 34, 54, 23, 32, 76, 15, 18, 42, 6, 14, 10, 3, 3, 43, 54, 21, 43, 76, 21, 32, 43, 54, 21, 987, 21, 32, 54, 21, 32, 54, 21, 3, 2, 5, 6, 1, 3, 3, 43, 54, 21, 43, 76, 21, 32, 43, 54, 21, 987, 21, 32, 54, 21, 32, 54, 21, 43, 21, 43, 21, 421, 43, 12, 5, 6, 7, 4, 2, 8, 9, 4, 2, 2, 6, 0, 1, 9, 43, 12, 5, 6};
    // 1 2 3 5 6
    // 9 6 2 1 0
    int n1 = sizeof(v1) / sizeof(int);
cout<<n1<<endl; 
    int n2 = sizeof(v2) / sizeof(int);

    sort(v1, v1 + n1);
    sort(v2, v2 + n2, compare);
    int sum = 0;
#pragma omp parallel for num_threads(24) reduction(+ : sum)
    for (int i = 0; i < n1; i++)
    {
        sum += (v1[i] * v2[i]);
    }

    cout << sum << endl;

    end = clock();
    double duration = ((double)end - start) / CLOCKS_PER_SEC;
    printf("\nTime taken to execute in seconds : %f", duration);
    return 0;
}